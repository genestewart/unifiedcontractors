name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    name: Build and Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-release-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-release-
            
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Run tests
        run: |
          npm run lint
          npm run test:run
          
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Create release archive
        run: |
          cd dist
          tar -czf ../unified-contractors-${{ github.ref_name }}.tar.gz .
          zip -r ../unified-contractors-${{ github.ref_name }}.zip .
          cd ..
          
      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, including all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Previous tag: $PREVIOUS_TAG"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges ${PREVIOUS_TAG}..HEAD)
          fi
          
          # Create changelog
          cat << EOF > CHANGELOG.md
          ## What's Changed
          
          ### Features and Improvements
          $(echo "$COMMITS" | grep -E "^- (feat|feature|add|new):" || echo "No features in this release")
          
          ### Bug Fixes
          $(echo "$COMMITS" | grep -E "^- (fix|bugfix|patch):" || echo "No bug fixes in this release")
          
          ### Other Changes
          $(echo "$COMMITS" | grep -vE "^- (feat|feature|add|new|fix|bugfix|patch):" || echo "No other changes")
          
          ### Statistics
          - Commits: $(git rev-list --count ${PREVIOUS_TAG}..HEAD 2>/dev/null || git rev-list --count HEAD)
          - Contributors: $(git log --format='%an' ${PREVIOUS_TAG}..HEAD 2>/dev/null | sort -u | wc -l || git log --format='%an' | sort -u | wc -l)
          - Files changed: $(git diff --stat ${PREVIOUS_TAG}..HEAD 2>/dev/null | tail -1 || git diff --stat | tail -1)
          
          **Full Changelog**: ${PREVIOUS_TAG}...${GITHUB_REF_NAME}
          EOF
          
          # Output changelog for release notes
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          name: Release ${{ github.event.inputs.version || github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          files: |
            unified-contractors-*.tar.gz
            unified-contractors-*.zip
            
      - name: Update package version
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Extract version number without 'v' prefix
          VERSION=${{ github.event.inputs.version }}
          VERSION_NUMBER=${VERSION#v}
          
          # Update package.json
          npm version $VERSION_NUMBER --no-git-tag-version
          
          # Commit and push
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add package.json package-lock.json
          git commit -m "chore: bump version to $VERSION_NUMBER"
          git push
          
      - name: Deploy to production
        if: success() && !contains(github.ref_name, '-beta') && !contains(github.ref_name, '-alpha')
        run: |
          echo "Triggering production deployment..."
          # This would trigger the deploy workflow
          # You can add deployment logic here or trigger another workflow
          
      - name: Notify team
        if: always()
        run: |
          echo "### Release ${{ github.ref_name }} Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Release created successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Release URL**: ${{ github.event.repository.html_url }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Release failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
          fi
          
  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-release
    if: success()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64